<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.CacheMapper">

    <!--     Emp getEmpByEid(@Param("eid") Integer eid);-->
    <!--    设置二级缓存的类型-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        <!--        eviction属性：缓存回收策略-->
        <!--        LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。-->
        <!--        FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。-->
        <!--        SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。-->
        <!--        WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。-->
        <!--        默认的是 LRU。-->
        <!--        flushInterval属性：刷新间隔，单位毫秒-->
        <!--        默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新-->
        <!--        size属性：引用数目，正整数-->
        <!--        代表缓存最多可以存储多少个对象，太大容易导致内存溢出-->
        <!--        readOnly属性：只读，true/false-->
        <!--        true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了-->
        <!--        很重要的性能优势。-->
        <!--        false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是-->
        <!--        false。  -->
    </cache>
    <select id="getEmpByEid" resultType="Emp">
        select * from t_emp where eid =#{eid}
    </select>

    <!--        void insertEmp(Emp emp);
    -->
    <insert id="insertEmp">
        insert into t_emp values(null,#{empName},#{age},#{sex},#{email},null)
    </insert>
</mapper>
